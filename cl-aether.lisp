(defun date-of-easter (year)
  "Gets the date of Easter for a given year"
  (let* ((a (mod year 19))
         (b (truncate (/ year 100)))
         (c (mod year 100))
         (d (truncate (/ b 4)))
         (e (mod b 4))
         (f (truncate (/ (+ b 8)
                         25)))
         (g (truncate (/ (+ (- b f)
                            1)
                         3)))
         (h (mod (+ (- (- (+ (* 19 a)
                             b)
                          d)
                       g)
                    15)
                 30))
         (i (truncate (/ c 4)))
         (k (mod c 4))
         (l (mod (- (- (+ (+ 32
                             (* 2 e))
                          (* 2 i))
                       h)
                    k)
                 7))
         (m (truncate (/ (+ (+ a
                               (* 11 h))
                            (* 22 l))
                         451)))
         (fn-10 (+ (- (+ h l)
                      (* 7 m))
                   114))
         (n (truncate (/ fn-10 31)))
         (p (mod fn-10 31))
         (day (+ 1 p))
         )
    (format nil "~A ~A" day
            (if (equal n 3)
                "March"
                "April"))))

(defun leap-year? (year)
  (if (and (equal 0 (mod year 4))
           (equal 0 (mod year 100))
           (equal 0 (mod year 400)))
      t
      nil))

(defun date-to-daynum (day month year)
  (let ((leap? (if (leap-year? year)
                   62
                   63)))
    (if (> day 2)
        (+ day (- (truncate (* (+ 1 month)
                                 30.6))
                    leap?))
        (+ day (truncate (/ (* (- month 1)
                               leap?)
                            2)))
        )))
